[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021-2022 Kompetenzzentrum Wasser Berlin gGmbH (KWB) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/prediction_random-forest.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Random Forest","text":"","code":"# Enable KWB-R universe  options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package \"dwc.wells\" install.packages('dwc.wells')"},{"path":"/articles/prediction_random-forest.html","id":"input-dataset","dir":"Articles","previous_headings":"","what":"Input Dataset","title":"Random Forest","text":"","code":"library(dwc.wells) df <- dwc.wells::model_data_reduced str(df) #> 'data.frame':    6308 obs. of  27 variables: #>  $ Qs_rel                : num  100 97.8 75.1 78.5 52.2 ... #>  $ well_id               : int  162 162 162 162 162 162 162 162 162 162 ... #>  $ well_age_years        : num  0 23.2 29.3 29.5 35 ... #>  $ construction_year     : num  1970 1970 1970 1970 1970 1970 1970 1970 1970 1970 ... #>  $ screen_material       : Factor w/ 6 levels \"Stahl\",\"Edelstahl\",..: 6 6 6 6 6 6 6 6 6 6 ... #>  $ diameter              : num  300 300 300 300 300 300 300 300 300 300 ... #>  $ drilling_method       : Factor w/ 6 levels \"Andere\",\"Kernbohrung\",..: 6 6 6 6 6 6 6 6 6 6 ... #>  $ admissible_discharge  : num  176 176 176 176 176 176 176 176 176 176 ... #>  $ operational_start.Qs  : num  39.1 39.1 39.1 39.1 39.1 ... #>  $ aquifer_coverage      : Factor w/ 5 levels \"unbedeckt\",\"bedeckt\",..: 2 2 2 2 2 2 2 2 2 2 ... #>  $ W_static.sd           : num  0.766 0.766 0.766 0.766 0.766 ... #>  $ surface_water.distance: Factor w/ 8 levels \"0-25\",\"25-50\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ n_rehab               : int  0 1 1 2 2 3 3 4 4 4 ... #>  $ time_since_rehab_years: num  0 0.0411 6.193 0.0794 5.5524 ... #>  $ volume_m3_d.mean      : num  1203 1203 1203 1203 1203 ... #>  $ volume_m3_d.cv        : num  1.29 1.29 1.29 1.29 1.29 ... #>  $ quality.EC            : num  824 824 824 824 824 ... #>  $ quality.DO            : num  0.235 0.235 0.235 0.235 0.235 0.235 0.235 0.235 0.235 0.235 ... #>  $ quality.Temp          : num  11.7 11.7 11.7 11.7 11.7 11.7 11.7 11.7 11.7 11.7 ... #>  $ quality.pH            : num  7.4 7.4 7.4 7.4 7.4 7.4 7.4 7.4 7.4 7.4 ... #>  $ quality.Redox         : num  86 86 86 86 86 86 86 86 86 86 ... #>  $ quality.Fe_tot        : num  1.9 1.9 1.9 1.9 1.9 1.9 1.9 1.9 1.9 1.9 ... #>  $ quality.Mn            : num  0.24 0.24 0.24 0.24 0.24 0.24 0.24 0.24 0.24 0.24 ... #>  $ quality.NO3           : num  0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 ... #>  $ quality.PO4           : num  0.966 0.966 0.966 0.966 0.966 ... #>  $ quality.SO4           : num  94 94 94 94 94 94 94 94 94 94 ... #>  $ quality.TSS           : num  4.1 4.1 4.1 4.1 4.1 4.1 4.1 4.1 4.1 4.1 ..."},{"path":"/articles/prediction_random-forest.html","id":"resampling","dir":"Articles","previous_headings":"","what":"Resampling","title":"Random Forest","text":"","code":"resampling <- \"random\" #resampling <- \"by_well\" set.seed(1)  if (resampling == \"random\") {    # for regression   data_split <- rsample::initial_split(df %>% dplyr::select(-well_id),                                        prop = 0.8,                                        strata = Qs_rel)   df_training <- data_split %>% rsample::training()   df_test <- data_split %>% rsample::testing()  }   # version 2: splitting per well ids  if (resampling == \"by_well\") {    well_ids <- unique(df$well_id)   train_ids <- sample(well_ids, 0.8 * length(well_ids))   test_ids <- setdiff(well_ids, train_ids)   df_training <- df %>%     dplyr::filter(well_id %in% train_ids) %>%     dplyr::select(-well_id)   df_test <- df %>%     dplyr::filter(well_id %in% test_ids) %>%     dplyr::select(-well_id)    }  tibble::as_tibble(df_training) #> # A tibble: 5,044 × 26 #>    Qs_rel well_age_years construction_year screen_material diameter #>     <dbl>          <dbl>             <dbl> <fct>              <dbl> #>  1   31.5           42.3              1970 Unbekannt            300 #>  2   20.7           44.2              1970 Unbekannt            300 #>  3   16.3           47.9              1970 Unbekannt            300 #>  4   22.4           47.9              1970 Unbekannt            300 #>  5   25.6           25.8              1993 Stahl                393 #>  6   19.0           16.2              1993 Stahl                393 #>  7   28.9           16.3              1993 Stahl                393 #>  8   37.5           15.9              1993 Stahl                393 #>  9   35.1           24.4              1993 Stahl                393 #> 10   30.4           20.7              1993 Stahl                393 #> # … with 5,034 more rows, and 21 more variables: drilling_method <fct>, #> #   admissible_discharge <dbl>, operational_start.Qs <dbl>, #> #   aquifer_coverage <fct>, W_static.sd <dbl>, surface_water.distance <fct>, #> #   n_rehab <int>, time_since_rehab_years <dbl>, volume_m3_d.mean <dbl>, #> #   volume_m3_d.cv <dbl>, quality.EC <dbl>, quality.DO <dbl>, #> #   quality.Temp <dbl>, quality.pH <dbl>, quality.Redox <dbl>, #> #   quality.Fe_tot <dbl>, quality.Mn <dbl>, quality.NO3 <dbl>, … tibble::as_tibble(df_test) #> # A tibble: 1,264 × 26 #>    Qs_rel well_age_years construction_year screen_material diameter #>     <dbl>          <dbl>             <dbl> <fct>              <dbl> #>  1   97.8          23.2               1970 Unbekannt            300 #>  2   78.5          29.5               1970 Unbekannt            300 #>  3   52.2          35.0               1970 Unbekannt            300 #>  4   27.2          42.9               1970 Unbekannt            300 #>  5   35.1          20.9               1993 Stahl                393 #>  6   82.7           6.07              1993 Stahl                393 #>  7   26.8          20.9               1993 Stahl                393 #>  8   16.9          24.4               1993 Stahl                393 #>  9   56.1          16.5               1993 Stahl                393 #> 10   68.5           6.11              1993 Stahl                393 #> # … with 1,254 more rows, and 21 more variables: drilling_method <fct>, #> #   admissible_discharge <dbl>, operational_start.Qs <dbl>, #> #   aquifer_coverage <fct>, W_static.sd <dbl>, surface_water.distance <fct>, #> #   n_rehab <int>, time_since_rehab_years <dbl>, volume_m3_d.mean <dbl>, #> #   volume_m3_d.cv <dbl>, quality.EC <dbl>, quality.DO <dbl>, #> #   quality.Temp <dbl>, quality.pH <dbl>, quality.Redox <dbl>, #> #   quality.Fe_tot <dbl>, quality.Mn <dbl>, quality.NO3 <dbl>, …"},{"path":[]},{"path":"/articles/prediction_random-forest.html","id":"hyperparameter-tuning","dir":"Articles","previous_headings":"Regression","what":"Hyperparameter Tuning","title":"Random Forest","text":"","code":"# Specify model ----------------------------------------------------------------    # specify model rf_reg_tune_model <- parsnip::rand_forest(trees = 500,                                            mtry = tune::tune(),                                            min_n = tune::tune()) %>%   # Specify the engine   parsnip::set_engine('randomForest') %>%   # Specify the mode   parsnip::set_mode('regression')  # specify recipe rec <- recipes::recipe(Qs_rel ~ ., data = df_training)  # setup  workflow rf_reg_tune_wflow <- workflows::workflow() %>%   workflows::add_recipe(rec) %>%   workflows::add_model(rf_reg_tune_model)  # define cross validation procedure cv_folds <- rsample::vfold_cv(df_training, v = 5)  # define hyperparameter grid #rf_reg_grid <- grid_random(parameters(rf_reg_tune_model), size = 100) #rf_reg_grid <- grid_regular(parameters(rf_reg_tune_model), c(5,5)) rf_reg_grid <- dials::grid_regular(dials::mtry(range = c(3, 15)),                                    dials::min_n(range = c(5, 15)),                                    levels = 13)  # parallelisation and tuning doParallel::registerDoParallel()  set.seed(345) rf_reg_tuning <- tune::tune_grid(   rf_reg_tune_wflow,   resamples = cv_folds,   grid = rf_reg_grid )  # visualise results metrics <- rf_reg_tuning %>% tune::collect_metrics() dwc.wells::save_data(metrics,                       path = getwd(),                       filename = sprintf(\"rf-regression_tuning-grid_resampling-%s_metric\",                                         resampling))  # visualise results metrics %>%   dplyr::filter(.metric == \"rmse\") %>%   dplyr::select(mean, min_n, mtry) %>%   tidyr::pivot_longer(min_n:mtry,                       values_to = \"value\",                       names_to = \"parameter\") %>%   ggplot2::ggplot(ggplot2::aes(value, mean, color = parameter)) +   ggplot2::geom_point(show.legend = FALSE) +   ggplot2::scale_x_continuous(breaks = seq.int(1, 15, 2)) +   ggplot2::facet_wrap(~parameter, scales = \"free_x\") +   ggplot2::labs(x = NULL, y = \"RMSE [%]\") +   sema.berlin.utils::my_theme()  ggplot2::ggsave(\"rf_reg_regression_hyperparameter_tuning_plot_regular_random_resampling.png\",                 width = 6,                  height = 3,                  dpi = 600)  # raster heatmap plot metrics %>%   dplyr::filter(.metric == \"rmse\") %>%   dplyr::select(mean, min_n, mtry) %>%   ggplot2::ggplot(aes(x = min_n, y = mtry, fill = mean)) +   ggplot2::geom_raster() +   ggplot2::scale_x_continuous(breaks = seq.int(1, 15, 2)) +   ggplot2::scale_y_continuous(breaks = seq.int(1, 15, 2)) +   ggplot2::labs(fill = \"RMSE [%]\") +   sema.berlin.utils::my_theme()  ggplot2::ggsave(\"rf_reg_regression_hyperparameter_tuning_plot_regular_random_resampling_heatmap.png\",                 width = 5,                  height = 3,                  dpi = 600)    # determine best model best_rmse <- tune::select_best(rf_reg_tuning, \"rmse\") dwc.wells::save_data(best_rmse,                       path = getwd(),                       filename = \"rf_reg_regression_best_model_regular\",                       \"RData\") final_rf_reg <- tune::finalize_model(rf_reg_tune_model, best_rmse)  # update workflow rf_reg_final_wflow <- workflows::workflow() %>%    workflows::add_recipe(rec) %>%    workflows::add_model(final_rf_reg)  # train and test model / workflow rf_reg_final_fit <- rf_reg_final_wflow %>% tune::last_fit(data_split)  #get metrics rf_reg_final_fit %>%  tune::collect_metrics()  # get predictions df_pred <- rf_reg_final_fit %>%  tune::collect_predictions()  # Evaluate model performance --- ggplot2::scatterplot(df_pred) ggplot2::ggsave(\"random_forest_regression_tuned_regular.png\", width = 3.5, height = 3)"},{"path":"/articles/prediction_random-forest.html","id":"best-fit-model","dir":"Articles","previous_headings":"Regression","what":"Best-Fit Model","title":"Random Forest","text":"","code":"rf_reg_model <- parsnip::rand_forest(trees = 500,                                      mtry = 6,                                       min_n = 10) %>%   # Specify the engine   parsnip::set_engine('randomForest') %>%   # Specify the mode   parsnip::set_mode('regression')  # Model training and assessment (regression) -----------------------------------  # Train model set.seed(26) rf_reg_fit <- rf_reg_model %>% parsnip::fit(Qs_rel ~ ., data = df_training)  # Make predictions predictions <- predict(rf_reg_fit, df_test)  # Evaluate model performance df_pred <- df_test %>%    dplyr::select(Qs_rel) %>%    dplyr::bind_cols(predictions)  yardstick::rmse(df_pred, truth = Qs_rel, estimate = .pred) #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 rmse    standard        16.3 yardstick::rsq(df_pred, truth = Qs_rel, estimate = .pred) #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 rsq     standard       0.747  # scatter plot dwc.wells::scatterplot(df_pred,                         lines_80perc = FALSE,                         alpha = 1,                         pointsize = 0.9) #> Warning: Removed 142 rows containing missing values (geom_point). ggplot2::ggsave(\"scatterplot_rf-regression_numeric.png\",                 dpi = 600,                 width = 3.5,                 height = 3) #> Warning: Removed 142 rows containing missing values (geom_point)."},{"path":"/articles/prediction_random-forest.html","id":"classification","dir":"Articles","previous_headings":"","what":"Classification","title":"Random Forest","text":"","code":"# classification performance ---------------------------------------------------  # classify Qs data df_pred <- df_pred %>%   dplyr::mutate(Qs_rel_class = dwc.wells::classify_Qs(Qs_rel),                 .pred_class = dwc.wells::classify_Qs(.pred))  # confusion matrix matrix <- yardstick::conf_mat(df_pred,                                truth = Qs_rel_class,                                estimate = .pred_class) matrix  #>           Truth #> Prediction low high #>       low  743  139 #>       high  27  355  # performance metrics metrics <- summary(matrix) metrics #> # A tibble: 13 × 3 #>    .metric              .estimator .estimate #>    <chr>                <chr>          <dbl> #>  1 accuracy             binary         0.869 #>  2 kap                  binary         0.713 #>  3 sens                 binary         0.965 #>  4 spec                 binary         0.719 #>  5 ppv                  binary         0.842 #>  6 npv                  binary         0.929 #>  7 mcc                  binary         0.726 #>  8 j_index              binary         0.684 #>  9 bal_accuracy         binary         0.842 #> 10 detection_prevalence binary         0.698 #> 11 precision            binary         0.842 #> 12 recall               binary         0.965 #> 13 f_meas               binary         0.900  dwc.wells::save_data(matrix,                       path = getwd(),                       filename = \"rf_numeric_to_class_matrix_split80\",                      formats = \"RData\")"},{"path":"/articles/prediction_xgboost.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"xgboost","text":"","code":"# Enable KWB-R universe  options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install R package \"dwc.wells\" install.packages('dwc.wells')"},{"path":"/articles/prediction_xgboost.html","id":"input-dataset","dir":"Articles","previous_headings":"","what":"Input Dataset","title":"xgboost","text":"","code":"library(dwc.wells) library(tidymodels) #> ── Attaching packages ────────────────────────────────────── tidymodels 0.2.0 ── #> ✔ broom        0.7.12     ✔ recipes      0.2.0  #> ✔ dials        0.1.0      ✔ rsample      0.1.1  #> ✔ dplyr        1.0.8      ✔ tibble       3.1.6  #> ✔ ggplot2      3.3.5      ✔ tidyr        1.2.0  #> ✔ infer        1.0.0      ✔ tune         0.2.0  #> ✔ modeldata    0.1.1      ✔ workflows    0.2.6  #> ✔ parsnip      0.2.1      ✔ workflowsets 0.2.1  #> ✔ purrr        0.3.4      ✔ yardstick    0.0.9 #> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ── #> ✖ purrr::discard() masks scales::discard() #> ✖ dplyr::filter()  masks stats::filter() #> ✖ dplyr::lag()     masks stats::lag() #> ✖ recipes::step()  masks stats::step() #> • Use tidymodels_prefer() to resolve common conflicts. df <- dwc.wells::model_data_reduced str(df) #> 'data.frame':    6308 obs. of  27 variables: #>  $ Qs_rel                : num  100 97.8 75.1 78.5 52.2 ... #>  $ well_id               : int  162 162 162 162 162 162 162 162 162 162 ... #>  $ well_age_years        : num  0 23.2 29.3 29.5 35 ... #>  $ construction_year     : num  1970 1970 1970 1970 1970 1970 1970 1970 1970 1970 ... #>  $ screen_material       : Factor w/ 6 levels \"Stahl\",\"Edelstahl\",..: 6 6 6 6 6 6 6 6 6 6 ... #>  $ diameter              : num  300 300 300 300 300 300 300 300 300 300 ... #>  $ drilling_method       : Factor w/ 6 levels \"Andere\",\"Kernbohrung\",..: 6 6 6 6 6 6 6 6 6 6 ... #>  $ admissible_discharge  : num  176 176 176 176 176 176 176 176 176 176 ... #>  $ operational_start.Qs  : num  39.1 39.1 39.1 39.1 39.1 ... #>  $ aquifer_coverage      : Factor w/ 5 levels \"unbedeckt\",\"bedeckt\",..: 2 2 2 2 2 2 2 2 2 2 ... #>  $ W_static.sd           : num  0.766 0.766 0.766 0.766 0.766 ... #>  $ surface_water.distance: Factor w/ 8 levels \"0-25\",\"25-50\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ n_rehab               : int  0 1 1 2 2 3 3 4 4 4 ... #>  $ time_since_rehab_years: num  0 0.0411 6.193 0.0794 5.5524 ... #>  $ volume_m3_d.mean      : num  1203 1203 1203 1203 1203 ... #>  $ volume_m3_d.cv        : num  1.29 1.29 1.29 1.29 1.29 ... #>  $ quality.EC            : num  824 824 824 824 824 ... #>  $ quality.DO            : num  0.235 0.235 0.235 0.235 0.235 0.235 0.235 0.235 0.235 0.235 ... #>  $ quality.Temp          : num  11.7 11.7 11.7 11.7 11.7 11.7 11.7 11.7 11.7 11.7 ... #>  $ quality.pH            : num  7.4 7.4 7.4 7.4 7.4 7.4 7.4 7.4 7.4 7.4 ... #>  $ quality.Redox         : num  86 86 86 86 86 86 86 86 86 86 ... #>  $ quality.Fe_tot        : num  1.9 1.9 1.9 1.9 1.9 1.9 1.9 1.9 1.9 1.9 ... #>  $ quality.Mn            : num  0.24 0.24 0.24 0.24 0.24 0.24 0.24 0.24 0.24 0.24 ... #>  $ quality.NO3           : num  0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 ... #>  $ quality.PO4           : num  0.966 0.966 0.966 0.966 0.966 ... #>  $ quality.SO4           : num  94 94 94 94 94 94 94 94 94 94 ... #>  $ quality.TSS           : num  4.1 4.1 4.1 4.1 4.1 4.1 4.1 4.1 4.1 4.1 ..."},{"path":"/articles/prediction_xgboost.html","id":"resampling","dir":"Articles","previous_headings":"","what":"Resampling","title":"xgboost","text":"","code":"resampling <- \"random\" #resampling <- \"by_well\" set.seed(1)  if (resampling == \"random\") {    # for regression   data_split <- rsample::initial_split(df %>% dplyr::select(-well_id),                                        prop = 0.8,                                        strata = Qs_rel)   df_training <- data_split %>% rsample::training()   df_test <- data_split %>% rsample::testing()  }   # version 2: splitting per well ids  if (resampling == \"by_well\") {    well_ids <- unique(df$well_id)   train_ids <- sample(well_ids, 0.8 * length(well_ids))   test_ids <- setdiff(well_ids, train_ids)   df_training <- df %>%     dplyr::filter(well_id %in% train_ids) %>%     dplyr::select(-well_id)   df_test <- df %>%     dplyr::filter(well_id %in% test_ids) %>%     dplyr::select(-well_id)    }  tibble::as_tibble(df_training) #> # A tibble: 5,044 × 26 #>    Qs_rel well_age_years construction_year screen_material diameter #>     <dbl>          <dbl>             <dbl> <fct>              <dbl> #>  1   31.5           42.3              1970 Unbekannt            300 #>  2   20.7           44.2              1970 Unbekannt            300 #>  3   16.3           47.9              1970 Unbekannt            300 #>  4   22.4           47.9              1970 Unbekannt            300 #>  5   25.6           25.8              1993 Stahl                393 #>  6   19.0           16.2              1993 Stahl                393 #>  7   28.9           16.3              1993 Stahl                393 #>  8   37.5           15.9              1993 Stahl                393 #>  9   35.1           24.4              1993 Stahl                393 #> 10   30.4           20.7              1993 Stahl                393 #> # … with 5,034 more rows, and 21 more variables: drilling_method <fct>, #> #   admissible_discharge <dbl>, operational_start.Qs <dbl>, #> #   aquifer_coverage <fct>, W_static.sd <dbl>, surface_water.distance <fct>, #> #   n_rehab <int>, time_since_rehab_years <dbl>, volume_m3_d.mean <dbl>, #> #   volume_m3_d.cv <dbl>, quality.EC <dbl>, quality.DO <dbl>, #> #   quality.Temp <dbl>, quality.pH <dbl>, quality.Redox <dbl>, #> #   quality.Fe_tot <dbl>, quality.Mn <dbl>, quality.NO3 <dbl>, … tibble::as_tibble(df_test) #> # A tibble: 1,264 × 26 #>    Qs_rel well_age_years construction_year screen_material diameter #>     <dbl>          <dbl>             <dbl> <fct>              <dbl> #>  1   97.8          23.2               1970 Unbekannt            300 #>  2   78.5          29.5               1970 Unbekannt            300 #>  3   52.2          35.0               1970 Unbekannt            300 #>  4   27.2          42.9               1970 Unbekannt            300 #>  5   35.1          20.9               1993 Stahl                393 #>  6   82.7           6.07              1993 Stahl                393 #>  7   26.8          20.9               1993 Stahl                393 #>  8   16.9          24.4               1993 Stahl                393 #>  9   56.1          16.5               1993 Stahl                393 #> 10   68.5           6.11              1993 Stahl                393 #> # … with 1,254 more rows, and 21 more variables: drilling_method <fct>, #> #   admissible_discharge <dbl>, operational_start.Qs <dbl>, #> #   aquifer_coverage <fct>, W_static.sd <dbl>, surface_water.distance <fct>, #> #   n_rehab <int>, time_since_rehab_years <dbl>, volume_m3_d.mean <dbl>, #> #   volume_m3_d.cv <dbl>, quality.EC <dbl>, quality.DO <dbl>, #> #   quality.Temp <dbl>, quality.pH <dbl>, quality.Redox <dbl>, #> #   quality.Fe_tot <dbl>, quality.Mn <dbl>, quality.NO3 <dbl>, …"},{"path":[]},{"path":"/articles/prediction_xgboost.html","id":"hyperparameter-tuning","dir":"Articles","previous_headings":"Regression","what":"Hyperparameter Tuning","title":"xgboost","text":"","code":"# Hyperparameter tuning --------------------------------------------------------   # specify model   xgb_model <- parsnip::boost_tree(     trees = 500,     tree_depth = tune::tune(), ## model complexity     min_n = tune::tune(), ## model complexity     loss_reduction = tune::tune(), ## model complexity     sample_size = tune::tune(), ## randomness     mtry = tune::tune(), ## randomness     learn_rate = tune::tune(), ## step size   ) %>%     parsnip::set_engine(\"xgboost\") %>%     parsnip::set_mode(\"regression\")    # set up workflow   xgb_wf <- workflows::workflow() %>%     workflows::add_formula(Qs_rel ~ .) %>%     workflows::add_model(xgb_model)    # hyperparameter sampling v1   # xgb_grid <- dials::grid_random(dials::tree_depth(),   #                                dials::min_n(),   #                                dials::loss_reduction(),   #                                sample_size = dials::sample_prop(),   #                                dials::finalize(dials::mtry(), df_training),   #                                dials::learn_rate(range = c(0.01, 0.1),    #                                                  trans = NULL),   #                                size = 1000)      # hyperparameter sampling v2   xgb_grid <- dials::grid_latin_hypercube(     dials::tree_depth(),     dials::min_n(),     dials::loss_reduction(),     sample_size = dials::sample_prop(),     dials::finalize(dials::mtry(), df_training),     dials::learn_rate(),     size = 500   )    # define cross validation procedure   cv_folds <- rsample::vfold_cv(df_training, v = 5)    # set up random grid with 20 combinations for first screening   doParallel::registerDoParallel()    # test different hyperparameters via cross validation on training data   set.seed(234)   xgb_tuning <- tune::tune_grid(     xgb_wf,     resamples = cv_folds,     grid = xgb_grid,     control = tune::control_grid(save_pred = TRUE)   )    # get assessment metrics   metrics <- tune::collect_metrics(xgb_tuning)      dwc.wells::save_data(metrics,                         path = getwd(),                         filename = \"metrics_tuning_xgb_random_resampling\")    # visualise results   metrics %>%     #filter(learn_rate > 0.01) %>%     dplyr::filter(.metric == \"rmse\") %>%     dplyr::select(mean, min_n, mtry, tree_depth, learn_rate, loss_reduction, sample_size) %>%     tidyr::pivot_longer(c(min_n, mtry, tree_depth, learn_rate, loss_reduction, sample_size),                         values_to = \"value\",                         names_to = \"parameter\") %>%     ggplot2::ggplot(ggplot2::aes(value, mean, color = parameter)) +     ggplot2::geom_point(show.legend = FALSE, size = 0.5) +     ggplot2::facet_wrap(~parameter, scales = \"free\") +     ggplot2::labs(x = NULL, y = \"RMSE [%]\") +     sema.berlin.utils::my_theme()  ggplot2::ggsave(\"xgb_regression_hyperparameter_tuning_plot_random_resampling_1000_v2.png\",                  width = 8,                  height = 4,                  dpi = 600)    # after example from https://juliasilge.com/blog/xgboost-tune-volleyball/  }"},{"path":"/articles/prediction_xgboost.html","id":"best-fit-model","dir":"Articles","previous_headings":"Regression","what":"Best-Fit Model","title":"xgboost","text":"","code":"# Specify model ----------------------------------------------------------------  xgb_model <- parsnip::boost_tree(mtry = 6,                                  min_n = 10,                                  trees = 500,                                  tree_depth = 7,                                  loss_reduction = 10,                                  learn_rate = 0.1,                                  sample_size = 0.7) %>%   parsnip::set_engine(\"xgboost\",                        nthreads = parallel::detectCores()) %>%   parsnip::set_mode(\"regression\")   # Model training and assessment (regression) -----------------------------------  # Train model set.seed(26) xgb_fit <- xgb_model %>% parsnip::fit(Qs_rel ~ ., data = df_training) #> [08:45:56] WARNING: amalgamation/../src/learner.cc:576:  #> Parameters: { \"nthreads\" } might not be used. #>  #>   This could be a false alarm, with some parameters getting used by language bindings but #>   then being mistakenly passed down to XGBoost core, or some parameter actually being used #>   but getting flagged wrongly here. Please open an issue if you find any such cases. #usethis::use_data(xgb_fit, compress = \"xz\", overwrite = TRUE)  # Make predictions predictions <- predict(xgb_fit, df_test)  # Evaluate model performance df_pred <- df_test %>%    dplyr::select(Qs_rel) %>%    dplyr::bind_cols(predictions)  yardstick::rmse(df_pred, truth = Qs_rel, estimate = .pred) #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 rmse    standard        14.4 yardstick::rsq(df_pred, truth = Qs_rel, estimate = .pred) #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 rsq     standard       0.794  # scatter plot dwc.wells::scatterplot(df_pred,                         lines_80perc = FALSE,                         alpha = 1,                         pointsize = 0.9) #> Warning: Removed 222 rows containing missing values (geom_point). ggplot2::ggsave(\"scatterplot_xgb_numeric.png\",                 dpi = 600,                 width = 3.5,                 height = 3) #> Warning: Removed 222 rows containing missing values (geom_point)."},{"path":"/articles/prediction_xgboost.html","id":"classification","dir":"Articles","previous_headings":"","what":"Classification","title":"xgboost","text":"","code":"# classification performance ---------------------------------------------------  # classify Qs data df_pred <- df_pred %>%   dplyr::mutate(Qs_rel_class = dwc.wells::classify_Qs(Qs_rel),                 .pred_class = dwc.wells::classify_Qs(.pred))  # confusion matrix matrix <- yardstick::conf_mat(df_pred,                                truth = Qs_rel_class,                                estimate = .pred_class) matrix  #>           Truth #> Prediction low high #>       low  723   93 #>       high  47  401  # performance metrics metrics <- summary(matrix) metrics #> # A tibble: 13 × 3 #>    .metric              .estimator .estimate #>    <chr>                <chr>          <dbl> #>  1 accuracy             binary         0.889 #>  2 kap                  binary         0.763 #>  3 sens                 binary         0.939 #>  4 spec                 binary         0.812 #>  5 ppv                  binary         0.886 #>  6 npv                  binary         0.895 #>  7 mcc                  binary         0.766 #>  8 j_index              binary         0.751 #>  9 bal_accuracy         binary         0.875 #> 10 detection_prevalence binary         0.646 #> 11 precision            binary         0.886 #> 12 recall               binary         0.939 #> 13 f_meas               binary         0.912  dwc.wells::save_data(matrix,                       path = getwd(),                       filename = \"xgb_numeric_to_class_matrix_split80\",                      formats = \"RData\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mathias Riechel. Author. Michael Rustler. Contributor, maintainer. . Funder. . Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riechel M (2022). dwc.wells: Package Condition Predictions Drinking Water Wells. R package version 0.1.0, https://github.com/KWB-R/dwc.wells.","code":"@Manual{,   title = {dwc.wells: A Package for Condition Predictions for Drinking Water Wells},   author = {Mathias Riechel},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/KWB-R/dwc.wells}, }"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Package for Condition Predictions for Drinking Water Wells","text":"details install KWB-R packages checkout installation tutorial.","code":"### Optionally: specify GitHub Personal Access Token (GITHUB_PAT) ### See here why this might be important for you: ### https://kwb-r.github.io/kwb.pkgbuild/articles/install.html#set-your-github_pat  # Sys.setenv(GITHUB_PAT = \"mysecret_access_token\")  # Install package \"remotes\" from CRAN if (! require(\"remotes\")) {   install.packages(\"remotes\", repos = \"https://cloud.r-project.org\") }  # Install KWB package 'dwc.wells' from GitHub remotes::install_github(\"KWB-R/dwc.wells\")"},{"path":"/reference/Qs_heatmap_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap / raster plot for Qs values over time with each well as one line — Qs_heatmap_plot","title":"Heatmap / raster plot for Qs values over time with each well as one line — Qs_heatmap_plot","text":"Heatmap / raster plot Qs values time well one line","code":""},{"path":"/reference/Qs_heatmap_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap / raster plot for Qs values over time with each well as one line — Qs_heatmap_plot","text":"","code":"Qs_heatmap_plot(   df,   colours,   dummy_labels,   date_limits,   title,   n_wells_per_page )"},{"path":"/reference/Qs_heatmap_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap / raster plot for Qs values over time with each well as one line — Qs_heatmap_plot","text":"df data frame date, well_id, Qs_rel colours 3 colours low, middle high colour limits dummy_labels dummy labels less wells expected date_limits vector two date strings format \"yyyy-mm-dd\" title plot title n_wells_per_page number wells shown","code":""},{"path":"/reference/chi2.CramersV.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — chi2.CramersV.test","title":"Title — chi2.CramersV.test","text":"Title","code":""},{"path":"/reference/chi2.CramersV.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — chi2.CramersV.test","text":"","code":"chi2.CramersV.test(data)"},{"path":"/reference/chi2.CramersV.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — chi2.CramersV.test","text":"data data frame perform Chi-2-test","code":""},{"path":"/reference/classify_Qs.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer Qs_rel into binary factor with low and high specific capacity — classify_Qs","title":"Transfer Qs_rel into binary factor with low and high specific capacity — classify_Qs","text":"Transfer Qs_rel binary factor low high specific capacity","code":""},{"path":"/reference/classify_Qs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer Qs_rel into binary factor with low and high specific capacity — classify_Qs","text":"","code":"classify_Qs(x, split_point = 80, class_names = c(\"low\", \"high\"))"},{"path":"/reference/classify_Qs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer Qs_rel into binary factor with low and high specific capacity — classify_Qs","text":"x vector Qs_rel values split_point threshold classifying numeric Qs_rel values, default: 80 class_names class names, default: c(\"low\", \"high\")","code":""},{"path":"/reference/combine_pump_test_and_Q_monitoring_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Combined Pumptest and Q Monitoring Dataset — combine_pump_test_and_Q_monitoring_data","title":"Combined Pumptest and Q Monitoring Dataset — combine_pump_test_and_Q_monitoring_data","text":"Combined Pumptest Q Monitoring Dataset","code":""},{"path":"/reference/combine_pump_test_and_Q_monitoring_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combined Pumptest and Q Monitoring Dataset — combine_pump_test_and_Q_monitoring_data","text":"","code":"combine_pump_test_and_Q_monitoring_data(   df_pump_tests_tidy,   df_Q_monitoring,   pump_test_vars )"},{"path":"/reference/combine_pump_test_and_Q_monitoring_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combined Pumptest and Q Monitoring Dataset — combine_pump_test_and_Q_monitoring_data","text":"df_pump_tests_tidy df_pump_tests_tidy df_Q_monitoring df_Q_monitoring pump_test_vars default: get_pump_test_vars","code":""},{"path":"/reference/combine_pump_test_and_Q_monitoring_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combined Pumptest and Q Monitoring Dataset — combine_pump_test_and_Q_monitoring_data","text":"combined pumptest Q monitoring dataset","code":""},{"path":"/reference/correlation_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"plots Qs_rel vs. input variable as box plot (categorical input variable)\nor scatterplot (numerical input variable) — correlation_plot","title":"plots Qs_rel vs. input variable as box plot (categorical input variable)\nor scatterplot (numerical input variable) — correlation_plot","text":"plots Qs_rel vs. input variable box plot (categorical input variable) scatterplot (numerical input variable)","code":""},{"path":"/reference/correlation_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plots Qs_rel vs. input variable as box plot (categorical input variable)\nor scatterplot (numerical input variable) — correlation_plot","text":"","code":"correlation_plot(df, x, y = \"Qs_rel\", title = gsub(\"_\", \" \", x))"},{"path":"/reference/correlation_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plots Qs_rel vs. input variable as box plot (categorical input variable)\nor scatterplot (numerical input variable) — correlation_plot","text":"df data frame x column name x variable\" y column name y variable (default Qs_rel\") title plot title","code":""},{"path":"/reference/extdata_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Path to File in This Package — extdata_file","title":"Get Path to File in This Package — extdata_file","text":"Get Path File Package","code":""},{"path":"/reference/extdata_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Path to File in This Package — extdata_file","text":"","code":"extdata_file(...)"},{"path":"/reference/extdata_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Path to File in This Package — extdata_file","text":"... parts path passed system.file","code":""},{"path":"/reference/fill_up_na_with_median_from_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill up NA values with median of lookup table — fill_up_na_with_median_from_lookup","title":"Fill up NA values with median of lookup table — fill_up_na_with_median_from_lookup","text":"Fill NA values median lookup table","code":""},{"path":"/reference/fill_up_na_with_median_from_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill up NA values with median of lookup table — fill_up_na_with_median_from_lookup","text":"","code":"fill_up_na_with_median_from_lookup(df, df_lookup, matching_id = \"well_id\")"},{"path":"/reference/fill_up_na_with_median_from_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill up NA values with median of lookup table — fill_up_na_with_median_from_lookup","text":"df data frame NA values df_lookup data frame calculate median values matching_id column ids median calculated","code":""},{"path":"/reference/frequency_table.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate absolute and relative frequencies of categorical varables — frequency_table","title":"calculate absolute and relative frequencies of categorical varables — frequency_table","text":"calculate absolute relative frequencies categorical varables","code":""},{"path":"/reference/frequency_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate absolute and relative frequencies of categorical varables — frequency_table","text":"","code":"frequency_table(x, perc_digits = 1, sort_freq = FALSE)"},{"path":"/reference/frequency_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate absolute and relative frequencies of categorical varables — frequency_table","text":"x vector categorical variable perc_digits number decimal digits percentages, default = 1 sort_freq sort according frequency counts, logical, default: TRUE","code":""},{"path":"/reference/get_W_static_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get W_static measurement data from Neubaupumpversuche, Kurzpumpversuche and other sources — get_W_static_data","title":"Get W_static measurement data from Neubaupumpversuche, Kurzpumpversuche and other sources — get_W_static_data","text":"Get W_static measurement data Neubaupumpversuche, Kurzpumpversuche sources","code":""},{"path":"/reference/get_W_static_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get W_static measurement data from Neubaupumpversuche, Kurzpumpversuche and other sources — get_W_static_data","text":"","code":"get_W_static_data(path, renamings, df_wells)"},{"path":"/reference/get_W_static_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get W_static measurement data from Neubaupumpversuche, Kurzpumpversuche and other sources — get_W_static_data","text":"path path static water level data (csv-file) renamings list renamings df_wells data frame prepared well data","code":""},{"path":"/reference/get_pump_test_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default Pump Test Variables — get_pump_test_vars","title":"Get Default Pump Test Variables — get_pump_test_vars","text":"Get Default Pump Test Variables","code":""},{"path":"/reference/get_pump_test_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default Pump Test Variables — get_pump_test_vars","text":"","code":"get_pump_test_vars()"},{"path":"/reference/get_pump_test_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default Pump Test Variables — get_pump_test_vars","text":"vector column names pump test variables","code":""},{"path":"/reference/get_pump_test_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default Pump Test Variables — get_pump_test_vars","text":"","code":"get_pump_test_vars() #>  [1] \"well_id\"                      \"date\"                         #>  [3] \"key\"                          \"Qs_rel\"                       #>  [5] \"days_since_operational_start\" \"well_age_years\"               #>  [7] \"n_rehab\"                      \"last_rehab.date\"              #>  [9] \"time_since_rehab_days\"        \"time_since_rehab_years\""},{"path":"/reference/interpolate_Qs.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolates Qs time series data to a given time interval — interpolate_Qs","title":"Interpolates Qs time series data to a given time interval — interpolate_Qs","text":"Interpolates Qs time series data given time interval","code":""},{"path":"/reference/interpolate_Qs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolates Qs time series data to a given time interval — interpolate_Qs","text":"","code":"interpolate_Qs(df, interval_days = 1)"},{"path":"/reference/interpolate_Qs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolates Qs time series data to a given time interval — interpolate_Qs","text":"df data frame date Qs measurements interval_days interval interpolation","code":""},{"path":"/reference/interpolate_and_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate and fill up static water level — interpolate_and_fill","title":"Interpolate and fill up static water level — interpolate_and_fill","text":"Interpolate fill static water level","code":""},{"path":"/reference/interpolate_and_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate and fill up static water level — interpolate_and_fill","text":"","code":"interpolate_and_fill(df, x_col, y_col, group_by_col, origin_col)"},{"path":"/reference/interpolate_and_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate and fill up static water level — interpolate_and_fill","text":"df data frame x_col x column, e.g. date, used interpolation y_col y column, e.g. measured values, used interpolation group_by_col grouping variable within interpolation done origin_col already existing created column type value","code":""},{"path":"/reference/load_renamings_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"load renaming table from original excel file — load_renamings_csv","title":"load renaming table from original excel file — load_renamings_csv","text":"load renaming table original excel file","code":""},{"path":"/reference/load_renamings_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load renaming table from original excel file — load_renamings_csv","text":"","code":"load_renamings_csv(infile)"},{"path":"/reference/load_renamings_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load renaming table from original excel file — load_renamings_csv","text":"infile full path excel file","code":""},{"path":"/reference/load_renamings_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"load renaming table from original excel file — load_renamings_excel","title":"load renaming table from original excel file — load_renamings_excel","text":"load renaming table original excel file","code":""},{"path":"/reference/load_renamings_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load renaming table from original excel file — load_renamings_excel","text":"","code":"load_renamings_excel(   infile,   sheet = \"DATEN\",   old_name_col = \"Feld\",   new_name_col = \"Parametername-R\" )"},{"path":"/reference/load_renamings_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load renaming table from original excel file — load_renamings_excel","text":"infile full path excel file sheet sheet name old_name_col name column original variable names new_name_col name column new variable names","code":""},{"path":"/reference/model_data_reduced.html","id":null,"dir":"Reference","previous_headings":"","what":"Input Data for Well Capacity Prediction — model_data_reduced","title":"Input Data for Well Capacity Prediction — model_data_reduced","text":"reduced dataset well capacity prediction created R script /data-raw/model_data.R","code":""},{"path":"/reference/model_data_reduced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input Data for Well Capacity Prediction — model_data_reduced","text":"","code":"model_data_reduced"},{"path":"/reference/model_data_reduced.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Input Data for Well Capacity Prediction — model_data_reduced","text":"data.frame 6308 rows 27 variables: well_id well id, info date date capacity measurement, info key measurement key, e.g. operational_start, pump_test_1, pump_test_2, info Qs_rel specific capacity well relative operational start condition, output days_since_operational_start days since operational start, redundant well_age_years years since operationa start, input, numeric construction_year year well construction screen_material screen material diameter well diameter (mm) drilling_method drilling_method admissible_discharge allowed pumping rate operational_start.Qs initial Qs construction aquifer_coverage confined / unconfined W_static.sd standard deviation static water level surface_water.distance distance surface water n_rehab number well rehabilitations time_since_rehab_years time since last well rehabilitation years volume_m3_d.mean mean daily abstraction volume (m3) quality.EC water quality: electical conductivity (us/cm) quality.D0 water quality: dissolved oxygen (mg/l) quality.Temp water quality: temperature (C) quality.pH water quality: pH quality.Redox water quality: electical conductivity (us/cm) quality.Fe_tot water quality: dissolved oxygen (mg/l) quality.Mn water quality: Mn (mg/l) quality.NO3 water quality: NO3 (mg/l) quality.PO4 water quality: PO4 (mg/l) quality.SO4 water quality: SO4 (mg/l) quality.TSS water quality: Total Suspended Solids (mg/l)","code":""},{"path":"/reference/paste_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste percent sign to numbers — paste_percent","title":"Paste percent sign to numbers — paste_percent","text":"Paste percent sign numbers","code":""},{"path":"/reference/paste_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste percent sign to numbers — paste_percent","text":"","code":"paste_percent(x)"},{"path":"/reference/paste_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste percent sign to numbers — paste_percent","text":"x numeric vector","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"plot frequency distribution of numerical variable — plot_distribution","title":"plot frequency distribution of numerical variable — plot_distribution","text":"plot frequency distribution numerical variable","code":""},{"path":"/reference/plot_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot frequency distribution of numerical variable — plot_distribution","text":"","code":"plot_distribution(   Data,   variable,   binwidth = NULL,   title,   vertical_x_axis_labels = TRUE,   boundary = 0 )"},{"path":"/reference/plot_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot frequency distribution of numerical variable — plot_distribution","text":"Data Data plotted variable variable binwidth binwidrh title plot title vertical_x_axis_labels x-axis labels ploted vertically (TRUE / FALSE) boundary left boundary bars, default: 0","code":""},{"path":"/reference/plot_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"plot frequency distribution of factor variable — plot_frequencies","title":"plot frequency distribution of factor variable — plot_frequencies","text":"plot frequency distribution factor variable","code":""},{"path":"/reference/plot_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot frequency distribution of factor variable — plot_frequencies","text":"","code":"plot_frequencies(   Data,   variable,   title = variable,   offset_perc_labels = 0.1,   size_perc_labels = 3,   vertical_x_axis_labels = TRUE )"},{"path":"/reference/plot_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot frequency distribution of factor variable — plot_frequencies","text":"Data Data plotted variable variable title plot title offset_perc_labels distance labels bars size_perc_labels size percent labels vertical_x_axis_labels x-axis labels ploted vertically (TRUE / FALSE)","code":""},{"path":"/reference/prepare_pump_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare pump test data with one row per Qs-measurement + rehab history — prepare_pump_test_data","title":"prepare pump test data with one row per Qs-measurement + rehab history — prepare_pump_test_data","text":"prepare pump test data one row per Qs-measurement + rehab history","code":""},{"path":"/reference/prepare_pump_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare pump test data with one row per Qs-measurement + rehab history — prepare_pump_test_data","text":"","code":"prepare_pump_test_data(path, renamings, df_wells, pump_test_vars)"},{"path":"/reference/prepare_pump_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare pump test data with one row per Qs-measurement + rehab history — prepare_pump_test_data","text":"path path pump test data renamings list renamings df_wells prepared data frame well characteristics pump_test_vars default: get_pump_test_vars","code":""},{"path":"/reference/prepare_pump_test_data_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare pump test data in wide format — prepare_pump_test_data_1","title":"Prepare pump test data in wide format — prepare_pump_test_data_1","text":"Steps: ) read, rename clean data, ii) correct wrong pump test dates, iii) fill missing pump test dates, iv) get information replaced wells, v) calculate Qs Qs_rel, vi) determine action type, vii) select columns","code":""},{"path":"/reference/prepare_pump_test_data_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare pump test data in wide format — prepare_pump_test_data_1","text":"","code":"prepare_pump_test_data_1(path, renamings, df_wells)"},{"path":"/reference/prepare_pump_test_data_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare pump test data in wide format — prepare_pump_test_data_1","text":"path path pump test data renamings list renamings df_wells prepared data frame well characteristics","code":""},{"path":"/reference/prepare_pump_test_data_2.html","id":null,"dir":"Reference","previous_headings":"","what":"reformats untidy pump test data from wide into long format — prepare_pump_test_data_2","title":"reformats untidy pump test data from wide into long format — prepare_pump_test_data_2","text":"reformats untidy pump test data wide long format","code":""},{"path":"/reference/prepare_pump_test_data_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformats untidy pump test data from wide into long format — prepare_pump_test_data_2","text":"","code":"prepare_pump_test_data_2(   df_pump_tests_untidy,   df_wells,   pump_test_vars = get_pump_test_vars() )"},{"path":"/reference/prepare_pump_test_data_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformats untidy pump test data from wide into long format — prepare_pump_test_data_2","text":"df_pump_tests_untidy pump test data wide format df_wells prepared data frame well characteristics pump_test_vars default: get_pump_test_vars","code":""},{"path":"/reference/prepare_quality_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Quality Data — prepare_quality_data","title":"Prepare Quality Data — prepare_quality_data","text":"Prepare Quality Data","code":""},{"path":"/reference/prepare_quality_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Quality Data — prepare_quality_data","text":"","code":"prepare_quality_data(path, renamings)"},{"path":"/reference/prepare_quality_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Quality Data — prepare_quality_data","text":"path path renamings renamings","code":""},{"path":"/reference/prepare_quality_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Quality Data — prepare_quality_data","text":"prepared quality day","code":""},{"path":"/reference/prepare_volume_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Volume Data — prepare_volume_data","title":"Prepare Volume Data — prepare_volume_data","text":"Prepare Volume Data","code":""},{"path":"/reference/prepare_volume_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Volume Data — prepare_volume_data","text":"","code":"prepare_volume_data(path, renamings, df_wells)"},{"path":"/reference/prepare_volume_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Volume Data — prepare_volume_data","text":"path path renamings renamings df_wells df_wells","code":""},{"path":"/reference/prepare_volume_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Volume Data — prepare_volume_data","text":"Prepared volume data","code":""},{"path":"/reference/read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"read csv data file exported by Sebastian Schimmelpfennig from db2 — read_csv","title":"read csv data file exported by Sebastian Schimmelpfennig from db2 — read_csv","text":"read csv data file exported Sebastian Schimmelpfennig db2","code":""},{"path":"/reference/read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read csv data file exported by Sebastian Schimmelpfennig from db2 — read_csv","text":"","code":"read_csv(   file,   header = TRUE,   fileEncoding = \"UTF-8\",   skip = 2,   dec = \".\",   sep = \"\\t\",   na.strings = \"(null)\" )"},{"path":"/reference/read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read csv data file exported by Sebastian Schimmelpfennig from db2 — read_csv","text":"file path csv file header logical, default = TRUE fileEncoding default = UTF-8 skip number rows skip, default = 2 dec decimal separator, default = '.' sep columns separator, default = 'tab' na.strings string represents NA, default = \"(null)\"","code":""},{"path":"/reference/read_ms_access.html","id":null,"dir":"Reference","previous_headings":"","what":"read table from MS Access data base via odbc connection under 64-bit-R — read_ms_access","title":"read table from MS Access data base via odbc connection under 64-bit-R — read_ms_access","text":"read table MS Access data base via odbc connection 64-bit-R","code":""},{"path":"/reference/read_ms_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read table from MS Access data base via odbc connection under 64-bit-R — read_ms_access","text":"","code":"read_ms_access(path_db, tbl_name)"},{"path":"/reference/read_ms_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read table from MS Access data base via odbc connection under 64-bit-R — read_ms_access","text":"path_db full path database tbl_name name database table read","code":""},{"path":"/reference/read_select_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"read table from MS Access data base; select and rename columns as defined in\nrenamings table ('old_name' -> 'new_name') — read_select_rename","title":"read table from MS Access data base; select and rename columns as defined in\nrenamings table ('old_name' -> 'new_name') — read_select_rename","text":"read table MS Access data base; select rename columns defined renamings table ('old_name' -> 'new_name')","code":""},{"path":"/reference/read_select_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read table from MS Access data base; select and rename columns as defined in\nrenamings table ('old_name' -> 'new_name') — read_select_rename","text":"","code":"read_select_rename(   path_db,   tbl_name,   renamings,   old_name_col = \"old_name\",   new_name_col = \"new_name\" )"},{"path":"/reference/read_select_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read table from MS Access data base; select and rename columns as defined in\nrenamings table ('old_name' -> 'new_name') — read_select_rename","text":"path_db full path database tbl_name name database table read renamings name data frame renamings old_name_col name column original variable names new_name_col name column new variable names","code":""},{"path":"/reference/rename_values.html","id":null,"dir":"Reference","previous_headings":"","what":"rename values of a character vector according to renamings table — rename_values","title":"rename values of a character vector according to renamings table — rename_values","text":"rename values character vector according renamings table","code":""},{"path":"/reference/rename_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rename values of a character vector according to renamings table — rename_values","text":"","code":"rename_values(   x,   renamings,   old_name_col = \"old_name\",   new_name_col = \"new_name\" )"},{"path":"/reference/rename_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rename values of a character vector according to renamings table — rename_values","text":"x character vector renamings data frame consisting old new names old_name_col name column original variable names new_name_col name column new variable names","code":""},{"path":"/reference/replace_na_with_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NAs with median — replace_na_with_median","title":"Replace NAs with median — replace_na_with_median","text":"Replace NAs median","code":""},{"path":"/reference/replace_na_with_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NAs with median — replace_na_with_median","text":"","code":"replace_na_with_median(x)"},{"path":"/reference/replace_na_with_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NAs with median — replace_na_with_median","text":"x vector, NA replaced","code":""},{"path":"/reference/save_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Save data frame in different formats: csv, RData, rds — save_data","title":"Save data frame in different formats: csv, RData, rds — save_data","text":"Save data frame different formats: csv, RData, rds","code":""},{"path":"/reference/save_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save data frame in different formats: csv, RData, rds — save_data","text":"","code":"save_data(Data, path, filename, formats = c(\"csv\", \"RData\", \"rds\"))"},{"path":"/reference/save_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save data frame in different formats: csv, RData, rds — save_data","text":"Data data frame path path saving data filename core file name formats export formats: \"csv\", \"RData\", \"rds\" several using 'c'","code":""},{"path":"/reference/scatterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"scatterplot for comparing numeric predictions with observations — scatterplot","title":"scatterplot for comparing numeric predictions with observations — scatterplot","text":"scatterplot comparing numeric predictions observations","code":""},{"path":"/reference/scatterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scatterplot for comparing numeric predictions with observations — scatterplot","text":"","code":"scatterplot(df_pred, lines_80perc = FALSE, alpha = 1, pointsize = 1)"},{"path":"/reference/scatterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scatterplot for comparing numeric predictions with observations — scatterplot","text":"df_pred data frame obtained tidymodels::collect_predictions() columns Qs_rel .pred lines_80perc logical value; shout 80%-lines drawn?; default = FALSE alpha alpha value point colours, default: 1 pointsize size value points, default: 1","code":""},{"path":"/reference/select_rename_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"selects and renames columns from a data frame according to a reference table — select_rename_cols","title":"selects and renames columns from a data frame according to a reference table — select_rename_cols","text":"selects renames columns data frame according reference table","code":""},{"path":"/reference/select_rename_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"selects and renames columns from a data frame according to a reference table — select_rename_cols","text":"","code":"select_rename_cols(   df,   renamings,   old_name_col = \"old_name\",   new_name_col = \"new_name\" )"},{"path":"/reference/select_rename_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"selects and renames columns from a data frame according to a reference table — select_rename_cols","text":"df data frame cols renamed renamings name data frame renamings old_name_col name column original variable names new_name_col name column new variable names","code":""},{"path":"/reference/summarise_marginal_factor_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"summarise factor levels with relative frequency below a threshold — summarise_marginal_factor_levels","title":"summarise factor levels with relative frequency below a threshold — summarise_marginal_factor_levels","text":"summarise factor levels relative frequency threshold","code":""},{"path":"/reference/summarise_marginal_factor_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summarise factor levels with relative frequency below a threshold — summarise_marginal_factor_levels","text":"","code":"summarise_marginal_factor_levels(x, perc_threshold, marginal_name)"},{"path":"/reference/summarise_marginal_factor_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summarise factor levels with relative frequency below a threshold — summarise_marginal_factor_levels","text":"x factor variable perc_threshold percentage threshold levels summarised marginal_name new summary factor level","code":""},{"path":"/reference/tidy_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"turn character into factor, sort factor levels and replace NA level — tidy_factor","title":"turn character into factor, sort factor levels and replace NA level — tidy_factor","text":"turn character factor, sort factor levels replace NA level","code":""},{"path":"/reference/tidy_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"turn character into factor, sort factor levels and replace NA level — tidy_factor","text":"","code":"tidy_factor(x, level_sorting = c(\"frequency\", \"alphabet\")[1])"},{"path":"/reference/tidy_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"turn character into factor, sort factor levels and replace NA level — tidy_factor","text":"x character vector turned factor level_sorting sorting factor levels; two options: \"frequency\" (default) \"alphabet\"; level \"Unbekannt\" always always end","code":""},{"path":"/news/index.html","id":"dwcwells-010","dir":"Changelog","previous_headings":"","what":"dwc.wells 0.1.0","title":"dwc.wells 0.1.0","text":"First milestone: data preparation finished Save package status finishing data preparation starting modelling. Added NEWS.md file track changes package. see https://style.tidyverse.org/news.html writing good NEWS.md","code":""}]
